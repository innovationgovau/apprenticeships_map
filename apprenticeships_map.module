<?php

/**
 * Implements hook_menu()
 **/

function apprenticeships_map_menu() {
	$items = array();
	$items['admin/config/user-interface/apprenticeships-map'] = array(
	    'title' => t('Apprenticeships Map Settings'),
	    'description' => 'Settings for the Apprenticeships Map.',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('_apprenticeships_map_admin_form'),
	    'access arguments' => array('access apprenticeships map settings form'),
	    'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}

/**
 * Implements hook_permission()
 **/

function apprenticeships_map_permission() {
 return array(
    'access apprenticeships map settings form' => array(
      'title' => t('Access Apprenticeships map settings'),
      'description' => t('Allow users to access the settings for the Apprenticeships map(s).'),
    ),
  );
}

/**
 * Implements hook_block_info()
 */

function apprenticeships_map_block_info() {
	$blocks['apprenticeships_map_home'] = array(
		'info' => t('Apprenticeships Home Page Map'),
		'cache' => DRUPAL_CACHE_PER_ROLE,
	);
	$blocks['apprenticeships_map_internal'] = array(
		'info' => t('Apprenticeships Internal Map'),
		'cache' => DRUPAL_CACHE_PER_ROLE,
	);
	return $blocks;
}

/**
 * Implements hook_block_view()
 */

function apprenticeships_map_block_view($delta = '') {

	// Get the URLs from the admin form.
	$url_string = variable_get('apprenticeships_map_load_js');
	$urls = explode(',', $url_string);

	switch ($delta) {
		case 'apprenticeships_map_home':
			$location = 'home';

			$apprenticeships_map_settings = array(
				'basePath' => drupal_get_path('module', 'apprenticeships_map'),
				'mapID' => 'map-canvas-home',
			);

			$block['subject'] = t('Find an Australian Apprenticeship Centre');
			$block['title'] = t('Find an AAC');
			if(current_path() == 'home') {
				// Only attach the javascript if it is actually needed.
				$block['content']['#attached']['js'] = array(
					array(
						'data' => array(
							'apprenticeships_map' => $apprenticeships_map_settings
						),
						'type' => 'setting',
					),
					'https://maps.googleapis.com/maps/api/js?client=gme-readingroom&sensor=true' => array(
	 	    		'type' => 'external',
					),
					drupal_get_path('module', 'apprenticeships_map') . '/js/infobox_packed.js' => array(
						'every page' => FALSE,
					),
					drupal_get_path('module', 'apprenticeships_map') . '/js/markerclusterer_compiled.js' => array(
						'every page' => FALSE,
					),
					drupal_get_path('module', 'apprenticeships_map') . '/js/apprenticeships_map.js' => array(
						'scope' => 'footer',
						'every page' => FALSE,
					),
				);
			}
			$block['content']['wrapper'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'class' => array($location . '-map'),
				),
			);
			$block['content']['wrapper']['body'] = array(
				'#prefix' => '<p>',
				'#markup' => t('<a href="@url" title="Find an Australian Apprenticeship Centre near you">Find an Australian Apprenticeships Centre</a>', array('@url' => url('find-my-aac/map'))),
				'#suffix' => '</p>',
			);
			$block['content']['wrapper']['map-canvas'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'id' => array("map-canvas-" . $location),
				),
			);
			$block['content']['wrapper']['map-feedback'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'id' => 'map-feedback',
				),
			);
			$block['content']['wrapper']['map-overlay'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'id' => 'map-overlay',
				),
			);
			$block['content']['wrapper']['map-message'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'id' => 'map-message',
				),
			);
			$block['content']['wrapper']['form-wrapper'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'class' => $location . '-map-form-wrapper',
				),
			);
			$block['content']['wrapper']['form-wrapper']['form-body'] = drupal_get_form('apprenticeships_map_aac_search');
		break;

		case 'apprenticeships_map_internal':
			
			$location = 'internal';

			$apprenticeships_map_settings = array(
				'basePath' => drupal_get_path('module', 'apprenticeships_map'),
				'mapID' => 'map-canvas-internal',
			);

			$block['subject'] = t('Find an Australian Apprenticeship Centre');
			foreach ($urls as $url) {
				if($url == current_path()) {
					// Only attach the javascript if it is actually needed.
					$block['content']['#attached']['js'] = array(
						array(
							'data' => array(
								'apprenticeships_map' => $apprenticeships_map_settings
							),
							'type' => 'setting',
						),
						'https://maps.googleapis.com/maps/api/js?client=gme-readingroom&sensor=true' => array(
		 	    		'type' => 'external',
						),
						drupal_get_path('module', 'apprenticeships_map') . '/js/infobox_packed.js' => array(
							'every page' => FALSE,
						),
						drupal_get_path('module', 'apprenticeships_map') . '/js/markerclusterer_compiled.js' => array(
							'every page' => FALSE,
						),
						drupal_get_path('module', 'apprenticeships_map') . '/js/apprenticeships_map.js' => array(
							'scope' => 'footer',
							'every page' => FALSE,
						),
					);
				}
			}			
			$block['content']['wrapper'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'class' => array($location . '-map'),
				),
			);
			$block['content']['wrapper']['body'] = array(
				'#prefix' => '<p>',
				'#markup' => t('<a href="@url" title="Find an Australian Apprenticeship Centre near you">Find an Australian Apprenticeships Centre</a>', array('@url' => url('find-my-aac/full-list'))),
				'#suffix' => '</p>',
			);
			$block['content']['wrapper']['map-canvas'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'id' => array("map-canvas-" . $location),
				),
			);
			$block['content']['wrapper']['map-feedback'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'id' => 'map-feedback',
				),
			);
			$block['content']['wrapper']['map-overlay'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'id' => 'map-overlay',
				),
			);
			$block['content']['wrapper']['map-message'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'id' => 'map-message',
				),
			);
			$block['content']['wrapper']['form-wrapper'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'class' => $location . '-map-form-wrapper',
				),
			);
			$block['content']['wrapper']['form-wrapper']['form-body'] = drupal_get_form('apprenticeships_map_aac_search');
			$block['content']['wrapper']['result-container'] = array(
				'#type' => 'container',
				'#attributes' => array(
					'id' => 'result-container',
				),
			);
		break;
	}
	return $block;
}

function apprenticeships_map_aac_search($form_state, $location) {

	$base_path = drupal_get_path('module', 'apprenticeships_map');

	$apprenticeships_map_settings = array(
		'basePath' => $base_path,
	);

	$form['location'] = array(
		'#title' => t('Location'),
		'#type' => 'textfield',
		'#size' => 10,
		'#attributes' => array(
			'placeholder' => t('City, Suburb'),
		),
	);

	$form['keywords'] = array(
		'#title' => t('Keywords'),
		'#type' => 'textfield',
		'#size' => 10,
		'#attributes' => array(
			'placeholder' => t('Keywords'),
		),
	);

	$form['submit'] = array(
		'#prefix' => '<div class="search-button">',
		'#markup' => '<input type="submit" value="Search" class="form-submit">',
		'#suffix' => '</div>',
	);

	$form['region_search']['content'] = array(
		'#prefix' => '<div class="region-search">',
		'#markup' => t('<a class="button" href="@url" title="Find my AAC by region">Search by region</a>', array('@url' => url('find-my-aac/by-region'))),
		'#suffix' => '</div>',
	);

	$form['#submit'] = array('apprenticeships_map_aac_search_submit');
	$form['#attributes']['class'] = array('search-block-form');

	return $form;
}

function apprenticeships_map_aac_search_validate($form, &$form_state) {
	
	$location = $form_state['values']['location'];
	$keywords = $form_state['values']['keywords'];

	if (!$location && !$keywords) {
		form_set_error('location', 'Please enter a location or one or more keywords.');
		form_set_error('keywords', '');
	}
}


/**
 * Implements hook_init()
 */

function apprenticeships_map_init(){
	// This is the controller function.

	// Before Drupal loads, check the URL. If it is 'map_do_search', then initiate the search functionality.
	if(request_path()=='map_do_search'){

		// Set a minute time limit.
		set_time_limit(3600);

		// Get a search result object.
		$search_result = apprenticeships_map_do_search();

		// Echo the $search_result object as json so it can be used by the JavaScript later on.
		echo json_encode($search_result);

		// End everything now so the theme is never loaded.
		exit;
	}
}

/**
 *  This function is the core function of the module.
 */

function apprenticeships_map_do_search(){

	//Get the keywords from the URL. These are passed in by the search page. Make sure that the request parameters are there. If they aren't, set them to empty (otherwise errors ensue).
	$keywords = isset($_REQUEST["term"]) ? $_REQUEST["term"] : '';
	$location = isset($_REQUEST["location"]) ? urlencode( $_REQUEST["location"] ) : '';

	// This is a stub for later implementation of a better region search.
	//$region = isset($_REQUEST["region"]) ? $_REQUEST["region"] : '';

	// This 'if' block is the 'default' position - no search has been run so it returns all objects.
	if(empty($location) && empty($keywords)){

		// Set up a cache to speed things up.
		if (variable_get('apprenticeships_map_cache') === 1) {

			//Create a cache object
			$cid = 'apprenticeships_map:aac_nodes_all';

			// Check if there is anything in the cache.
			if ($cached = cache_get($cid)) {

				// If there is data there, return it instead of running the query.
				return _apprenticeships_map_populate_nodes($cached->data);
			}
		}
		// Set up the SQL query text.
		$sql = "SELECT nid FROM {node} WHERE type = 'australian_apprenticeship_centre' AND status = 1 ORDER BY title";

		// Set the $result variable to the results of the db_query function, using the $sql string.
		$results = db_query($sql)->fetchAll();
		
		// If the cache is being used, set the cache to the new data.
		if (variable_get('apprenticeships_map_cache') === 1) {
			cache_set($cid, $results, 'cache', strtotime('+1 day'));
		}

		// Return the $results array, passing it through the _apprenticeships_map_populate_nodes function.
		return _apprenticeships_map_populate_nodes($results);
	}

	// This 'if' block is run if only 'location' is filled in.
	if(!empty($location) && empty($keywords)) {

		// Get the lat and long from the geocode function.

		$geo = _apprenticeships_map_geocode($location);
		
		// Set up the SQL query text. This query uses the Haversine formula to calculate the distance between the geodata returned from Google and the geodata of the map object.
		// Note that this data can't be cached as it is being changed for each search. The current query is limited to 50 - this could be changed through a form.
		$sql = "SELECT node.nid, node.status, entity_id, deleted, field_data_field_aac_location.field_aac_location_lat, field_data_field_aac_location.field_aac_location_lon,
				ACOS( SIN( RADIANS( field_aac_location_lat ) ) * SIN( RADIANS( :lat ) ) + COS( RADIANS( field_aac_location_lat ) ) * COS( RADIANS( :lat )) * COS( RADIANS( field_aac_location_lon ) - RADIANS( :lng )) ) * 6380 AS distance 
				FROM field_data_field_aac_location
				LEFT JOIN node ON field_data_field_aac_location.entity_id = node.nid WHERE deleted = 0 and node.status = 1 ORDER BY distance";

		$results = db_query($sql, array(
			":lat" => $geo['lat'],
			":lng" => $geo['lng'],
		)) -> fetchAll();

		// Return the $results array, passing it through the _apprenticeships_map_populate_nodes function.
		return _apprenticeships_map_populate_nodes($results);
	}
	
	// This 'if' block is run if 'keywords' is filled in. This runs a search against the search server, but doesn't require a distance calculation as there's no 'origin'.
	if (!empty($keywords)) {

		// Query the search index. This uses db_select because ity is querying the search index.
		$query = db_select('search_index', 'i', array(
			'target' => 'slave',
		))->extend('SearchQuery');
		$query->join('node', 'n', 'n.nid = i.sid');
	
		// Plug in the search term from $keywords.
		$query->searchExpression(preg_replace("/[^a-zA-Z0-9 ]/s", "", $keywords), 'node');
	
		$query->fields('n', array('nid'))->distinct();
		$query->condition('n.status', 1);
		$query->addTag('node_access');
		$query->condition('n.type', 'australian_apprenticeship_centre');
	
		// Finally, if the keywords AND location are filled in, we add some stuff to the query to get some distance info.
		if(!empty($location)){

			// Get the lat and long from the geocode function.
			$geo = _apprenticeships_map_geocode($location);
			$lat = $geo['lat'];
			$lng = $geo['lng'];

			$query->join('field_data_field_aac_location', 'coords', 'n.nid = coords.entity_id');
			$query->condition('coords.entity_type', 'node');	
			$query->orderBy("ACOS( SIN( RADIANS( field_aac_location_lat ) ) * SIN( RADIANS( $lat ) ) + COS( RADIANS( field_aac_location_lat ) ) * COS( RADIANS( $lat )) * COS( RADIANS( field_aac_location_lon ) - RADIANS( $lng )) ) * 6380 ","ASC");
		}

		// Implement _node_rankings to order the search.
		_node_rankings($query);

		// Execute the query.
		$results = $query->execute()->fetchAll();

		// Send the $results variable back through the _apprenticeships_map_populate_nodes function.
		return _apprenticeships_map_populate_nodes($results);
	}
}

function _apprenticeships_map_geocode($loc) {
	// Create the geocoding URL using the location as the key.
	$url = "http://maps.googleapis.com/maps/api/geocode/json?address=".$loc.",+AU&sensor=false";

	// Create the $geocode_object variable from the decoded JSON object pulled from $url.
	$geocode_object = json_decode( file_get_contents($url) );

	// Create a $geo array to hold the lat and long.
	$geo = array();
	// Validate the data return from the object.
	if(count($geocode_object->results) > 0 && isset($geocode_object->results[0]->geometry->location)) {

		// Set up a latitude object ($lat)
		$geo['lat'] = $geocode_object->results[0]->geometry->location->lat;

		// Set up a longitude object ($lng).
		$geo['lng'] = $geocode_object->results[0]->geometry->location->lng;		
	}
	return $geo;
}

function _apprenticeships_map_administrative_area($abbrv){
	// This function converts the states from the database on the $node object into fully-qualified names which Google requires.

	$administrative_area = array(
		"ACT" => "Australian Capital Territory",
		"NSW" => "New South Wales",
		"NT"  => "Northern Territory",
		"QLD" => "Queensland",
		"SA"  => "South Australia",
		"TAS" => "Tasmania",
		"VIC" => "Victoria",
		"WA"  => "Western Australia",	
	);
	$abbrv = strtoupper($abbrv);
	return $administrative_area[$abbrv];
}

function pp($var) {
	echo "<pre>";
	print_r($var);
	echo "</pre><br /><br />";
}

function _apprenticeships_map_populate_nodes($results){
	// This function loads all the nodes by the nid passed through the $results array.

	$map_objects = array();

	foreach ($results as $result) {

		// Create a map object to hold only the relevant data.
		$map_object = array();

		// Build the alias of each node.
		$alias = drupal_get_path_alias('node/'.$result->nid);

		// Load each node using the nid. $node is now the full $node object.
		$node = node_load($result->nid);

		// Add only the data we need to each map object. This also makes the other code a lot less complex.
		$map_object['nid'] = $node->nid;
		$map_object['alias'] = $alias;
		$map_object['title'] = $node->title;
		$map_object['street'] = $node->field_aac_address['und'][0]['thoroughfare'];
		$map_object['premise'] = $node->field_aac_address['und'][0]['premise'];
		$map_object['city'] = $node->field_aac_address['und'][0]['locality'];
		$map_object['state'] = $node->field_aac_address['und'][0]['administrative_area'];
		$map_object['postcode'] = $node->field_aac_address['und'][0]['postal_code'];
		$map_object['type'] = $node->field_aac_type;

		// If this is a distance search, add the distance string to the map object.
		if (isset($result->distance)) {
			$map_object['distance'] = $result->distance;
		}
		// Make sure there is geo data attached to the node. If not, then we'll throw this object away.
		if (isset($node->field_aac_location['und'][0])) {
			$map_object['geo'] = $node->field_aac_location['und'][0];
		}
		// As long as the AAC type field isn't empty, turn it from the vid into the actual name.
		if(!empty($map_object['type'])){
			$map_object['type'] = taxonomy_term_load($map_object['type'])->name;
		}
		// As long as the administrative area (state) isn't empty, convert it from the abbreviation to the name.
		if(!empty($map_object['state'])){
			$map_object['state'] = _apprenticeships_map_administrative_area($map_object['state']);	
			// Make sure the country is set as 'Australia'.
			$map_object['country'] = "Australia";
		}

		// If the map object has geo data, add it to the $map_objects array, if not, it gets destroyed.
		if (isset($map_object['geo'])) {
			$map_objects[] = $map_object;
		}
	}

	// Replace the contents of the $results array (which is just nids) with the contents of the $map_objects array.
	$results = $map_objects;

	// Send the results back to the controller function to be displayed as JSON.
	return $results;
}

function _apprenticeships_map_admin_form() {
	$form = array();

	$form['apprenticeships_map_load_js'] = array(
		'#type' => 'textarea',
		'#title' => 'Pages to load JavaScript',
		'#default_value' => variable_get('apprenticeships_map_load_js',''),
		'#description' => t('Enter the relative paths of the pages you would like the map blocks to appear, separated by a comma. This will ensure that the javascript is only loaded on those pages. Note that scripts will always load on the home page.'),
		'#required' => TRUE,
	);
	$form['apprenticeships_map_cache'] = array(
		'#type' => 'checkbox',
		'#title' => 'Cache database queries?',
		'#default_value' => variable_get('apprenticeships_map_cache',''),
		'#description' => t('Caching the database results can speed things up substantially.'),
		'#required' => TRUE,
	);
  return system_settings_form($form);
}
